generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]
  viewHistories ViewHistory[]
  comments      Comment[]

  createdAt DateTime
  updatedAt DateTime

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime
  updatedAt DateTime

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime
  updatedAt DateTime

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verification")
}

model Webtoon {
  id            Int           @id @default(autoincrement())
  title         String
  synopsis      String
  thumbnailUrl  String
  daysOfWeek    Int[]
  isAdult       Boolean       @default(false)
  isFinished    Boolean       @default(false)
  episodes      Episode[]
  tags          Tag[]
  viewHistories ViewHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("webtoon")
}

model Episode {
  id            Int           @id @default(autoincrement())
  episodeNumber Int
  thumbnailUrl  String
  subtitle      String
  contents      String[]
  comments      Comment[]
  viewHistory   ViewHistory[]

  webtoonId Int
  webtoon   Webtoon @relation(fields: [webtoonId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([webtoonId, episodeNumber])
  @@map("episode")
}

model ViewHistory {
  id       Int      @id @default(autoincrement())
  viewedAt DateTime @default(now())

  webtoonId Int
  webtoon   Webtoon @relation(fields: [webtoonId], references: [id])
  episodeId Int
  episode   Episode @relation(fields: [episodeId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@unique([episodeId, userId])
  @@index([webtoonId, userId])
  @@map("view_history")
}

model Comment {
  id Int @id @default(autoincrement())

  content String

  userId    String
  user      User    @relation(fields: [userId], references: [id])
  episodeId Int
  episode   Episode @relation(fields: [episodeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comment")
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  webtoons Webtoon[]

  @@map("tag")
}
